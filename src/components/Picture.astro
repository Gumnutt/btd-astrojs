---
import { getDirectusClient } from "../utils/getDirectusClient"
import { getAssetURL, getAssetData } from "../utils/getAssetData"

const directus = await getDirectusClient()
const imageData = await directus.items("home_page_files").readByQuery({
  fields: ["*"],
  meta: "total_count",
})
const { imageIds, hasDetail } = Astro.props

export interface Props {
  imageIds: string[]
  hasDetail: boolean
}
---

<picture>
  {
    imageData.data.map(async (image) => {
      const imgdata = getAssetData(image.directus_files_id)
      const url = getAssetURL(image.directus_files_id)
      const response = await fetch(imgdata)
        .then((response) => response.json())
        .then((r) => r.data)
      const type = response.type.split("/")[1]
      if (!["jpg", "jpeg"].includes(type)) {
        return <source srcset={url} type={response.type} />
      }
      return <img src={url} />
    })
  }
  {hasDetail && <div class="hero--detail" />}
</picture>

<script is:inline>
  const handleScroll = (mobile) => {
    const scaleElement = document.getElementsByClassName("hero--detail")[0]
    const hero = document.getElementsByClassName("hero")[0]

    let scrollTop = window.scrollY
    let docHeight = document.body.offsetHeight
    let winHeight = window.innerHeight
    let scrollPercent = (scrollTop / (docHeight - winHeight)) * 10

    if (scrollPercent > 1) {
      scaleElement.style.transform = `scale(${scrollPercent})`
    } else {
      scaleElement.style.transform = `scale(1)`
    }

    let observer = new IntersectionObserver((entries, obs) => {
      entries.forEach((entry) => {
        if (entry.intersectionRatio < 0.5) {
          scaleElement.style.webkitAnimationPlayState = "paused"
        } else {
          scaleElement.style.webkitAnimationPlayState = "running"
        }
      })
    })
    if (hero) {
      observer.observe(hero)
    }
  }
  window.addEventListener("scroll", handleScroll)
</script>
